{
    "name": "FieldVal UI",
    "text": "<p>The FieldVal UI library allows you to create forms with basic and custom field types that can easily display errors generated by FieldVal.</p>\n",
    "sections": [
        {
            "name": "Browser Usage",
            "code": [
                {
                    "type": "js",
                    "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                    "runnable": true,
                    "demo": true,
                    "js_library": "jquery",
                    "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                    "runnable_contents": "$(document).ready(function(){\n\t\n\tvar output = $(\"<pre/>\");\n\tvar display_output = function(value) {\n\t\toutput.text(\"Form output:\\n\" + JSON.stringify(value, null, 4));\n\t}\n\n\tvar form = new FVForm()\n\t.add_field(\"name\", new FVTextField(\"Name\"))\n\t.add_field(\"email\", new FVTextField(\"Email\"))\n\t.add_field(\"subscribe\", new FVBooleanField(\"Subscribe?\"))\n\t.on_submit(function(value){\n\t\tdisplay_output(value);\n\t})\n\n\tform.element.append(\n\t\t$(\"<button/>\").text(\"Submit\")\n\t).appendTo(\"body\");\n\n\tvar value = {\n\t\tname: \"Name\",\n\t\temail: \"Email\",\n\t\tsubscribe: true\n\t}\n\tform.val(value);\n\tdisplay_output(value);\n\toutput.appendTo(\"body\");\n});",
                    "contents": "var form = new FVForm()\n.add_field(\"name\", new FVTextField(\"Name\"))\n.add_field(\"email\", new FVTextField(\"Email\"))\n.add_field(\"subscribe\", new FVBooleanField(\"Subscribe?\"))\n.on_submit(function(value){\n\tconsole.log(value);\n})\n\nform.element.append(\n\t$(\"<button/>\").text(\"Submit\")\n).appendTo(\"body\");"
                }
            ],
            "text": "<p>This simple example shows how to build a form that contains 3 fields and a submit button.</p>\n<p>The form is an instance of the <code>FVForm</code> class.</p>\n<p>Fields are individual instances of classes such as TextField, BooleanField (full list <a href=\"/docs/fieldvalui/Fields\">here</a>). The first argument in a field constructor is usually its display name.</p>\n<p>Fields are added to the form using <code>form.add_field()</code>. The first argument is the key for the field in the form; the second is the field instance.</p>\n<p><code>form.element</code> is a jQuery element that should be appended to the parent container.</p>\n<p>Because form.element is a <code>&lt;form&gt;</code>, any button that is appended to it will act as a submit button and will result in <code>form.on_submit</code> being called.</p>\n",
            "sections": [
                {
                    "name": "Bower",
                    "text": "<p>FieldVal UI is available as a <a href=\"http://bower.io\">Bower</a> package. To install into your existing project, use:</p>\n<pre><code class=\"lang-bash\">bower install fieldval-ui --save\n</code></pre>\n"
                },
                {
                    "name": "Manual install",
                    "text": "<p>To use FieldVal UI in the browser without a package manager, download <code>fieldval.min.js</code> from its repository:</p>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/FieldVal/fieldval-ui/master/fieldval-ui.min.js\">fieldval-ui.min.js</a> (<a href=\"https://github.com/FieldVal/fieldval-ui\">repository</a>)</li>\n</ul>\n"
                }
            ]
        },
        {
            "name": "FVForm",
            "text": "<p>FVForm is a class implementing the form behaviour.</p>\n",
            "sections": [
                {
                    "name": "val",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "demo": true,
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\t\n\tvar form = new FVForm()\n\t.add_field(\"name\", new FVTextField(\"Name\"))\n\t.add_field(\"email\", new FVTextField(\"Email\"))\n\n\tform.val({\n\t\tname: \"Some name\",\n\t\temail: \"Some email\"\n\t})\n\n\tform.element.appendTo(\"body\");\n\t\n\t$(\"<pre/>\").text(JSON.stringify(form.val(),null,4)).appendTo(\"body\");\n});",
                            "contents": "var form = new FVForm()\n.add_field(\"name\", new FVTextField(\"Name\"))\n.add_field(\"email\", new FVTextField(\"Email\"))\n\nform.val({\n\tname: \"Some name\",\n\temail: \"Some email\"\n})\n\nform.element.appendTo(\"body\");\n\n$(\"<pre/>\").text(JSON.stringify(form.val(),null,4)).appendTo(\"body\");"
                        }
                    ],
                    "text": "<p><code>val([data])</code></p>\n<p>Sets form values if data object is specified. Otherwise, returns all form values.</p>\n"
                },
                {
                    "name": "on_submit",
                    "text": "<pre><code>on_submit(function(value){\n})\n</code></pre><p>on_submit calls a provided function with the value of the form when it is submitted</p>\n"
                },
                {
                    "name": "error",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "demo": true,
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\t\n\tvar form = new FVForm()\n\t.add_field(\"name\", new FVTextField(\"Name\"))\n\t.add_field(\"email\", new FVTextField(\"Email\"))\n\tform.element.appendTo(\"body\");\n\n\t//Generated by FieldVal\n\tvar error = {\n\t    \"missing\": {\n\t        \"name\": {\n\t            \"error_message\": \"Field missing.\",\n\t            \"error\": 1\n\t        }\n\t    },\n\t    \"invalid\": {\n\t        \"email\": {\n\t            \"error\": 107,\n\t            \"error_message\": \"Invalid email address format.\"\n\t        }\n\t    },\n\t    \"error_message\": \"One or more errors.\",\n\t    \"error\": 0\n\t}\n\n\tform.error(error);\n});",
                            "contents": "var form = new FVForm()\n.add_field(\"name\", new FVTextField(\"Name\"))\n.add_field(\"email\", new FVTextField(\"Email\"))\nform.element.appendTo(\"body\");\n\n//Generated by FieldVal\nvar error = {\n    \"missing\": {\n        \"name\": {\n            \"error_message\": \"Field missing.\",\n            \"error\": 1\n        }\n    },\n    \"invalid\": {\n        \"email\": {\n            \"error\": 107,\n            \"error_message\": \"Invalid email address format.\"\n        }\n    },\n    \"error_message\": \"One or more errors.\",\n    \"error\": 0\n}\n\nform.error(error);"
                        }
                    ],
                    "text": "<p><code>error(error_object)</code></p>\n<p>Populates the form with the provided error.</p>\n"
                },
                {
                    "name": "clear_errors",
                    "text": "<p><code>clear_errors()</code></p>\n<p>Removes all form errors.</p>\n"
                },
                {
                    "name": "disable",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "demo": true,
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\t\n\tvar form = new FVForm()\n\t.add_field(\"name\", new FVTextField(\"Name\"))\n\t.add_field(\"email\", new FVTextField(\"Email\"))\n\n\tform.val({\n\t\tname: \"Some name\",\n\t\temail: \"Some email\"\n\t})\n\n\tform.disable();\n\n\tform.element.appendTo(\"body\");\n});",
                            "contents": "var form = new FVForm()\n.add_field(\"name\", new FVTextField(\"Name\"))\n.add_field(\"email\", new FVTextField(\"Email\"))\n\nform.val({\n\tname: \"Some name\",\n\temail: \"Some email\"\n})\n\nform.disable();"
                        }
                    ],
                    "text": "<p><code>disable()</code></p>\n<p>Disables all fields in the form.</p>\n"
                },
                {
                    "name": "enable",
                    "text": "<p>Enables all fields in the form.</p>\n"
                }
            ]
        },
        {
            "name": "Fields",
            "text": "<p>The library implements many basic fields that are very common in applications of any type. However, when basic fields do not satisfy requirements of the application, it is easy to create <a href=\"/docs/fieldvalui/Customizing/Fields\">fully customized fields</a>.</p>\n<p>All fields have <code>.val()</code> method equivalent to the one in the form. The method returns parsed output, which is different for each field.</p>\n",
            "sections": [
                {
                    "name": "FVTextField",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "demo": true,
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\t\n\tvar form = new FVForm()\n\t.add_field(\"text_field\", new FVTextField(\"Simple text field\"));\n  \n  \tform.element.appendTo(\"body\");\n});",
                            "contents": "var form = new FVForm()\n.add_field(\"text\", new FVTextField(\"Simple text\"));"
                        },
                        {
                            "type": "js",
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "runnable": true,
                            "demo": true,
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\t\n\tvar form = new FVForm()\n\t.add_field(\"textarea\", new FVTextField(\"Simple textarea\", \"textarea\"));\n  \n  \tform.element.appendTo(\"body\");\n});",
                            "contents": "var form = new FVForm()\n.add_field(\"textarea\", new FVTextField(\"Simple textarea\", \"textarea\"));"
                        }
                    ],
                    "text": "<p>FVTextField is a standard text input field.</p>\n<p>Constructor takes optional type parameter, which accepts any input tag attribute values (e.g. text, password) or &quot;textarea&quot;.</p>\n<p><code>.val()</code> returns a string.</p>\n"
                },
                {
                    "name": "FVPasswordField",
                    "code": [
                        {
                            "type": "js",
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "runnable": true,
                            "demo": true,
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\t\n\tvar form = new FVForm()\n\t.add_field(\"password\", new FVPasswordField(\"Password\"));\n  \n  \tform.element.appendTo(\"body\");\n});",
                            "contents": "var form = new FVForm()\n.add_field(\"password\", new FVPasswordField(\"Password\"));"
                        }
                    ],
                    "text": "<p>FVPasswordField is a wrapper of FVTextField that sets input type to &quot;password&quot;. </p>\n<p><code>.val()</code> returns a string.</p>\n"
                },
                {
                    "name": "FVBooleanField",
                    "code": [
                        {
                            "type": "js",
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "runnable": true,
                            "demo": true,
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\t\n\tvar form = new FVForm()\n\t.add_field(\"boolean\", new FVBooleanField(\"Boolean\"));\n  \n  \tform.element.appendTo(\"body\");\n});",
                            "contents": "var form = new FVForm()\n.add_field(\"boolean\", new FVBooleanField(\"Boolean\"));"
                        }
                    ],
                    "text": "<p>FVBooleanField is a standard checkbox input field.</p>\n<p><code>.val()</code> returns a boolean.</p>\n"
                },
                {
                    "name": "FVDateField",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "demo": true,
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\t\n\tvar form = new FVForm()\n\t.add_field(\"date\", new FVDateField(\"Date\"));\n  \n  \tform.element.appendTo(\"body\");\n});",
                            "contents": "var form = new FVForm()\n.add_field(\"date\", new FVDateField(\"Date\"));"
                        }
                    ],
                    "text": "<p>FVDateField is a custom date input field. </p>\n<p><code>.val()</code> returns a string.</p>\n"
                },
                {
                    "name": "FVChoiceField",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "demo": true,
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\t\n\tvar options = {\n\t\tchoices: [\"one\", \"two\", \"three\"],\n\t\tallow_empty: true,\n\t\tempty_text: \"empty_value\"\n\t}\n\n\tvar form = new FVForm()\n\t.add_field(\"choice\", new FVChoiceField(\"Choice field\", options));\n  \n  \tform.element.appendTo(\"body\");\n});",
                            "contents": "var options = {\n\tchoices: [\"one\", \"two\", \"three\"],\n\tallow_empty: true,\n\tempty_text: \"empty_value\"\n}\n\nvar form = new FVForm()\n.add_field(\"choice\", new FVChoiceField(\"Choice field\", options));"
                        }
                    ],
                    "text": "<p>FVChoiceField is a custom text field that provides a dropdown list of pre-defined values that match the current input.</p>\n<p><code>.val()</code> returns a string.</p>\n"
                },
                {
                    "name": "FVArrayField",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "demo": true,
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\t\n\tvar options = {\n\t\tadd_button_text: \"Add\"\n\t}\n\n\tvar array_field = new FVArrayField(\"Array\", options);\n\tarray_field.new_field = function() {\n\t\tarray_field.add_field(\"element\", new FVTextField(\"element\"));\n\t}\n\n\tvar form = new FVForm()\n\t.add_field(\"array\", array_field);\n\t\n  \tform.element.appendTo(\"body\");\n});",
                            "contents": "var options = {\n\tadd_button_text: \"Add\"\n}\n\nvar array_field = new FVArrayField(\"Array\", options);\narray_field.new_field = function() {\n\tarray_field.add_field(\"element\", new FVTextField(\"element\"));\n}\n\nvar form = new FVForm()\n.add_field(\"array\", array_field);"
                        }
                    ],
                    "text": "<p>FVArrayField is a custom field that implements a list of elements of any type.</p>\n<p>Optional second parameter of the constructor is an object with options.\nAvailable options: <code>add_button_text</code> that modifies text of array field&#39;s &quot;add&quot; button.</p>\n<p>Click on the add button calls <code>new_field</code> method, which has to be implemented by the developer. The method should create any FieldVal UI compatible field and pass it to the <code>add_field</code> method of the FVArrayField object.</p>\n<p><code>.val()</code> returns a list of values.</p>\n"
                },
                {
                    "name": "FVDisplayField",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "demo": true,
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\t\n\tvar form = new FVForm()\n\t.add_field(\"display\", new FVDisplayField(\"Display\"));\n  \n\tform.val({\n\t\tdisplay: \"Some display value\"\n\t})\n\n  \tform.element.appendTo(\"body\");\n});",
                            "contents": "var form = new FVForm()\n.add_field(\"display\", new FVDateField(\"Display\"));\n\nform.val({\n\tdisplay: \"Some display value\"\n})"
                        }
                    ],
                    "text": "<p>FVDisplayField is a field that cannot be modifeid by the user. It is mostly used for display purposes.</p>\n"
                },
                {
                    "name": "FVObjectField",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "demo": true,
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\t\n\tvar output = $(\"<pre/>\");\n\tvar display_output = function(value) {\n\t\toutput.text(\"Form output:\\n\" + JSON.stringify(value, null, 4));\n\t}\n\n\tvar object_field = new FVObjectField(\"User\")\n\t.add_field(\"username\", new FVTextField(\"Username\"))\n\t.add_field(\"email\", new FVTextField(\"Email\", \"email\"))\n\t.add_field(\"password\", new FVPasswordField(\"Password\"));\n\n\tvar form = new FVForm()\n\t.add_field(\"user\", object_field)\n\t.on_submit(function(value) {\n\t\tdisplay_output(value);\n\t});\n  \n  \tform.element.append(\n\t\t$(\"<button/>\").text(\"Submit\")\n\t).appendTo(\"body\");\n\n\tvar value = {\n\t\tuser: {\n\t\t\tusername: \"username\",\n\t\t\temail: \"email@example.com\",\n\t\t\tpassword: \"password\"\n\t\t}\n\t}\n\tform.val(value);\n\tdisplay_output(value);\n\toutput.appendTo(\"body\");\n});",
                            "contents": "var object_field = new FVObjectField(\"User\")\n.add_field(\"username\", new FVTextField(\"Username\"))\n.add_field(\"email\", new FVTextField(\"Email\", \"email\"))\n.add_field(\"password\", new FVPasswordField(\"Password\"));\n\nvar form = new FVForm()\n.add_field(\"user\", object_field)\n.on_submit(function(value) {\n\tconsole.log(value);\n});"
                        }
                    ],
                    "text": "<p>FVObjectField is a custom field that allows creating object-like structure of the output. Note the output in the example.</p>\n<p><code>.val()</code> returns an object.</p>\n"
                },
                {
                    "name": "FVKeyValueField",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "demo": true,
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "js_library": "jquery",
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                            "runnable_contents": "$(document).ready(function(){\n\n\tvar output = $(\"<pre/>\");\n\tvar display_output = function(value) {\n\t\toutput.text(\"Form output:\\n\" + JSON.stringify(value, null, 4));\n\t}\n\t\n\tvar key_value_field = new FVKeyValueField(\"KeyValue\");\n\tkey_value_field.new_field = function() {\n\t\tvar text_field = new FVTextField(\"Value\");\n\t\tkey_value_field.add_field(\"value\", text_field);\n\t\treturn text_field;\n\t}\n\n\tvar form = new FVForm()\n\t.add_field(\"key_value\", key_value_field)\n\t.on_submit(function(value) {\n\t\tdisplay_output(value);\n\t});\n  \n  \tform.element.append(\n\t\t$(\"<button/>\").text(\"Submit\")\n\t).appendTo(\"body\");\n\n\tvar value = {\n\t\tkey_value: {\n\t\t\tkey: \"some_value\"\n\t\t}\n\t}\n\tform.val(value);\n\toutput.appendTo(\"body\");\n\tdisplay_output(value);\n});",
                            "contents": "var key_value_field = new FVKeyValueField(\"KeyValue\");\nkey_value_field.new_field = function() {\n\tvar text_field = new FVTextField(\"Value\");\n\tkey_value_field.add_field(\"value\", text_field);\n\treturn text_field;\n}\n\nvar form = new FVForm()\n.add_field(\"key_value\", key_value_field)\n.on_submit(function(value) {\n\tconsole.log(value);\n});"
                        }
                    ],
                    "text": "<p>FVKeyValueField is a custom field that implements an object field with dynamic key values.</p>\n<p>Click on the add button calls <code>new_field</code> method, which has to be implemented by the developer. The method should create any FieldVal UI compatible field, pass it to the <code>add_field</code> method of the FVKeyValueField object and then return the field.</p>\n<p><code>.val()</code> returns an object.</p>\n"
                }
            ]
        },
        {
            "name": "Validating",
            "code": [
                {
                    "type": "js",
                    "runnable": true,
                    "demo": true,
                    "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                    "js_library": "jquery",
                    "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval-all.js",
                    "runnable_contents": "function validate_form(data) {\n\tvar validator = new FieldVal(data);\n\tvalidator.get(\"name\", BasicVal.string(true));\n\tvalidator.get(\"email\", BasicVal.string(true), BasicVal.email());\n\treturn validator.end();\n}\n\n\n$(document).ready(function(){\n\n\tvar output = $(\"<pre/>\");\n\tvar display_output = function(value) {\n\t\toutput.text(\"Error output:\\n\" + JSON.stringify(value, null, 4));\n\t}\n\t\n\tvar form = new FVForm()\n\t.add_field(\"name\", new FVTextField(\"Name\"))\n\t.add_field(\"email\", new FVTextField(\"Email\"))\n\t.on_submit(function(value){\n\t\tform.clear_errors();\n\t\tvar error = validate_form(value); \n\t\tif (error) {\n\t\t\tform.error(error);\n\t\t}\n\t\tdisplay_output(error);\n\t})\n  \n\tform.element.append(\n\t\t$(\"<button/>\").text(\"Submit\")\n\t).appendTo(\"body\");\n\toutput.appendTo(\"body\");\n\tform.submit();\n});",
                    "contents": "function validate_form(data) {\n\tvar validator = new FieldVal(data);\n\tvalidator.get(\"name\", BasicVal.string(true));\n\tvalidator.get(\"email\", BasicVal.string(true), BasicVal.email());\n\treturn validator.end();\n}\n\nvar form = new FVForm()\n.add_field(\"name\", new FVTextField(\"Name\"))\n.add_field(\"email\", new FVTextField(\"Email\"))\n.on_submit(function(value){\n\tform.clear_errors();\n\tvar error = validate_form(value); \n\tif (error) {\n\t\tform.error(error);\n\t} else {\n\t\talert(JSON.stringify(value));\n\t}\n})"
                }
            ],
            "text": "<p><a href=\"/docs/fieldval\">FieldVal</a> can be used for validating the output of the form. Moreover, the error generated by FieldVal can be displayed in a FVForm. The example demonstrates this behaviour.</p>\n"
        },
        {
            "name": "Customizing",
            "text": "",
            "sections": [
                {
                    "name": "Style",
                    "text": "<p>FieldVal UI has its own minimal css theme located in <a href=\"https://raw.githubusercontent.com/FieldVal/fieldval-ui/master/themes/minimal.css\">themes/minimal.css</a>. All code examples include this theme for demonstration purposes. However, the theme is completely optional and is never included into your code by default. </p>\n<p><a href=\"https://raw.githubusercontent.com/FieldVal/fieldval-ui/master/themes/minimal.css\">minimal.css</a> should serve as a good template for creating custom themes.</p>\n"
                },
                {
                    "name": "Fields",
                    "text": "<p>You can extend any of the field types and override necessary methods.</p>\n<p>In order to start from scratch, subclass <a href=\"https://github.com/FieldVal/fieldval-ui/blob/master/src/FVField/FVField.js\">FVField</a>, which is a base class that all fields extend.</p>\n<p>Create necessary visual elements in the constructor and append them to the <code>input_holder</code> variable of the field.</p>\n<p>Override following methods:</p>\n<pre><code>disable()\n</code></pre><p>Disables field the input.</p>\n<p><br></p>\n<pre><code>enable()\n</code></pre><p>Enables field input.</p>\n<p><br></p>\n<pre><code>focus()\n</code></pre><p>Focuses the field.</p>\n<p><br></p>\n<pre><code>blur()\n</code></pre><p>Removes the focus from the field.</p>\n<p><br></p>\n<pre><code>val(set_val)\n</code></pre><p>Sets field&#39;s value if set_val is specified. Otherwise returns field&#39;s current value.</p>\n<p><br></p>\n<p><a href=\"https://github.com/FieldVal/fieldval-ui/blob/master/src/FVField/FVBooleanField/FVBooleanField.js\">FVBooleanField</a> is a good example of a simple field.</p>\n"
                }
            ]
        }
    ]
}